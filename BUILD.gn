#
# Copyright (c) 2019 The WebGLNativePorts Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#

declare_args() {
  enable_dawn = true
  enable_angle = false
  enable_d3d12 = true
}

executable("aquarium") {
  libs = []

  sources = [
    "aquarium-optimized/src/Aquarium.cpp",
    "aquarium-optimized/src/Aquarium.h",
    "aquarium-optimized/src/ASSERT.h",
    "aquarium-optimized/src/Buffer.h",
    "aquarium-optimized/src/Context.cpp",
    "aquarium-optimized/src/Context.h",
    "aquarium-optimized/src/ContextFactory.cpp",
    "aquarium-optimized/src/ContextFactory.h",
    "aquarium-optimized/src/FishModel.h",
    "aquarium-optimized/src/FPSTimer.cpp",
    "aquarium-optimized/src/FPSTimer.h",
    "aquarium-optimized/src/GenericModel.h",
    "aquarium-optimized/src/InnerModel.h",
    "aquarium-optimized/src/Main.cpp",
    "aquarium-optimized/src/Matrix.h",
    "aquarium-optimized/src/Model.cpp",
    "aquarium-optimized/src/Model.h",
    "aquarium-optimized/src/OutsideModel.h",
    "aquarium-optimized/src/Program.cpp",
    "aquarium-optimized/src/Program.h",
    "aquarium-optimized/src/SeaweedModel.h",
    "aquarium-optimized/src/Texture.cpp",
    "aquarium-optimized/src/Texture.h",
    "aquarium-optimized/src/opengl/BufferGL.cpp",
    "aquarium-optimized/src/opengl/BufferGL.h",
    "aquarium-optimized/src/opengl/ContextGL.cpp",
    "aquarium-optimized/src/opengl/ContextGL.h",
    "aquarium-optimized/src/opengl/FishModelGL.cpp",
    "aquarium-optimized/src/opengl/FishModelGL.h",
    "aquarium-optimized/src/opengl/GenericModelGL.cpp",
    "aquarium-optimized/src/opengl/GenericModelGL.h",
    "aquarium-optimized/src/opengl/InnerModelGL.cpp",
    "aquarium-optimized/src/opengl/InnerModelGL.h",
    "aquarium-optimized/src/opengl/OutsideModelGL.cpp",
    "aquarium-optimized/src/opengl/OutsideModelGL.h",
    "aquarium-optimized/src/opengl/ProgramGL.cpp",
    "aquarium-optimized/src/opengl/ProgramGL.h",
    "aquarium-optimized/src/opengl/SeaweedModelGL.cpp",
    "aquarium-optimized/src/opengl/SeaweedModelGL.h",
    "aquarium-optimized/src/opengl/TextureGL.cpp",
    "aquarium-optimized/src/opengl/TextureGL.h",
  ]

  deps = [
    "third_party:stb",
  ]

  include_dirs = [
    "third_party/rapidjson/include",
    "third_party/stb",
  ]

  defines = []

  if (enable_angle) {
    enable_dawn = false

    defines += [ "EGL_EGL_PROTOTYPES" ]

    include_dirs += [
      "third_party/angle/include",
      "third_party/angle/util",
    ]

    deps += [
      "third_party/angle:libANGLE",
      "third_party/angle:libGLESv2",
      "third_party/angle:libEGL",
      "third_party/angle:angle_util_static",
    ]
  } else {
    deps += [ "third_party:glad" ]

    include_dirs += [ "third_party/glad/include" ]
  }

  if (enable_dawn) {
    defines += [ "ENABLE_DAWN_BACKEND" ]

    include_dirs += [ "third_party/dawn/src" ]

    sources += [
      "aquarium-optimized/src/dawn/BufferDawn.cpp",
      "aquarium-optimized/src/dawn/BufferDawn.h",
      "aquarium-optimized/src/dawn/ContextDawn.cpp",
      "aquarium-optimized/src/dawn/ContextDawn.h",
      "aquarium-optimized/src/dawn/FishModelDawn.cpp",
      "aquarium-optimized/src/dawn/FishModelDawn.h",
      "aquarium-optimized/src/dawn/FishModelInstancedDrawDawn.cpp",
      "aquarium-optimized/src/dawn/FishModelInstancedDrawDawn.h",
      "aquarium-optimized/src/dawn/GenericModelDawn.cpp",
      "aquarium-optimized/src/dawn/GenericModelDawn.h",
      "aquarium-optimized/src/dawn/InnerModelDawn.cpp",
      "aquarium-optimized/src/dawn/InnerModelDawn.h",
      "aquarium-optimized/src/dawn/OutsideModelDawn.cpp",
      "aquarium-optimized/src/dawn/OutsideModelDawn.h",
      "aquarium-optimized/src/dawn/ProgramDawn.cpp",
      "aquarium-optimized/src/dawn/ProgramDawn.h",
      "aquarium-optimized/src/dawn/SeaweedModelDawn.cpp",
      "aquarium-optimized/src/dawn/SeaweedModelDawn.h",
      "aquarium-optimized/src/dawn/TextureDawn.cpp",
      "aquarium-optimized/src/dawn/TextureDawn.h",
    ]

    deps += [
      "third_party/dawn/src/dawn:dawn_headers",
      "third_party/dawn:dawn_utils",
      "third_party/dawn/src/dawn:libdawn",
      "third_party/dawn:libdawn_native",
      "third_party/dawn/third_party/shaderc:libshaderc",
    ]

    include_dirs += [
      "third_party/dawn/third_party/glfw/include",
      "third_party/dawn/third_party/shaderc/libshaderc/include"
    ]
  } else {
    deps += [ "third_party:glfw" ]

    include_dirs += [
      "third_party/glfw/include",
    ]
  }

  if (enable_d3d12) {
    defines += [ "ENABLE_D3D12_BACKEND" ]

    include_dirs += [
      "common/d3d12",
    ]

    libs += [
      "d3d12.lib",
      "dxgi.lib",
      "d3dcompiler.lib",
    ]

    sources += [
      "aquarium-optimized/src/d3d12/BufferD3D12.cpp",
      "aquarium-optimized/src/d3d12/BufferD3D12.h",
      "aquarium-optimized/src/d3d12/ContextD3D12.cpp",
      "aquarium-optimized/src/d3d12/ContextD3D12.h",
      "aquarium-optimized/src/d3d12/FishModelInstancedDrawD3D12.cpp",
      "aquarium-optimized/src/d3d12/FishModelInstancedDrawD3D12.h",
      "aquarium-optimized/src/d3d12/GenericModelD3D12.cpp",
      "aquarium-optimized/src/d3d12/GenericModelD3D12.h",
      "aquarium-optimized/src/d3d12/InnerModelD3D12.cpp",
      "aquarium-optimized/src/d3d12/InnerModelD3D12.h",
      "aquarium-optimized/src/d3d12/OutsideModelD3D12.cpp",
      "aquarium-optimized/src/d3d12/OutsideModelD3D12.h",
      "aquarium-optimized/src/d3d12/ProgramD3D12.cpp",
      "aquarium-optimized/src/d3d12/ProgramD3D12.h",
      "aquarium-optimized/src/d3d12/SeaweedModelD3D12.cpp",
      "aquarium-optimized/src/d3d12/SeaweedModelD3D12.h",
      "aquarium-optimized/src/d3d12/TextureD3D12.cpp",
      "aquarium-optimized/src/d3d12/TextureD3D12.h",
    ]
  }

  cflags_cc = [
    "-Wno-string-conversion",
    "-Wno-unused-result",
  ]
}

executable("aquarium-direct-map") {
  sources = [
    "aquarium-direct-map/src/ASSERT.h",
    "aquarium-direct-map/src/AttribBuffer.h",
    "aquarium-direct-map/src/AttribBuffer.cpp",
    "aquarium-direct-map/src/Buffer.h",
    "aquarium-direct-map/src/Buffer.cpp",
    "aquarium-direct-map/src/FPSTimer.h",
    "aquarium-direct-map/src/FPSTimer.cpp",
    "aquarium-direct-map/src/Globals.h",
    "aquarium-direct-map/src/Main.cpp",
    "aquarium-direct-map/src/Matrix.h",
    "aquarium-direct-map/src/Model.h",
    "aquarium-direct-map/src/Model.cpp",
    "aquarium-direct-map/src/Program.h",
    "aquarium-direct-map/src/Program.cpp",
    "aquarium-direct-map/src/Scene.h",
    "aquarium-direct-map/src/Scene.cpp",
    "aquarium-direct-map/src/Texture.h",
    "aquarium-direct-map/src/Texture.cpp",
    "aquarium-direct-map/src/Uniform.h",
    "aquarium-direct-map/src/Uniform.cpp",
  ]
  
  deps = [
    "third_party:stb",
    "third_party:glad",
    "third_party:glfw",
  ]
  
  include_dirs = [
    "third_party/glad/include",
    "third_party/rapidjson/include",
    "third_party/stb",
    "third_party/glfw/include",
  ]
  
  cflags_cc = [
    "-Wno-string-conversion",
    "-Wno-unused-result",
  ]
}