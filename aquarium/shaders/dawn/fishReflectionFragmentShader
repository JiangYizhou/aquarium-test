#version 450

layout(location = 0) in vec4 v_position;
layout(location = 1) in vec2 v_texCoord;
layout(location = 2) in vec3 v_tangent;  // #normalMap
layout(location = 3) in vec3 v_binormal;  // #normalMap
layout(location = 4) in vec3 v_normal;
layout(location = 5) in vec3 v_surfaceToLight;
layout(location = 6) in vec3 v_surfaceToView;
layout(location = 0) out vec4 outColor;

layout(std140, set = 0, binding = 1) uniform LightUniforms {
    vec4 lightColor;
    vec4 specular;
    vec4 ambient;
} lightUniforms;

layout(std140, set = 2, binding = 1) uniform LightFactorUniforms {
    float shininess;
    float specularFactor;
} lightFactorUniforms;

layout(set = 2, binding = 2) uniform sampler samplerTex2D;
layout(set = 2, binding = 3) uniform sampler samplerSkybox;
layout(set = 2, binding = 4) uniform texture2D diffuse;
layout(set = 2, binding = 5) uniform texture2D normalMap;
layout(set = 2, binding = 6) uniform texture2D reflectionMap; // #reflection
layout(set = 2, binding = 7) uniform textureCube skybox; // #reflecton

layout(std140, set = 0, binding = 2) uniform Fogs
{
    float fogPower;
	float fogMult;
	float fogOffset;
	vec4 fogColor;
} fogs;

vec4 lit(float l ,float h, float m) {
  return vec4(1.0,
              max(l, 0.0),
              (l > 0.0) ? pow(max(0.0, h), m) : 0.0,
              1.0);
}
void main() {
  vec4 diffuseColor = texture(sampler2D(diffuse, samplerTex2D), v_texCoord);
  mat3 tangentToWorld = mat3(v_tangent,  // #normalMap
                             v_binormal,  // #normalMap
                             v_normal);  // #normalMap
  vec4 normalSpec = texture(sampler2D(normalMap, samplerTex2D), v_texCoord.xy);  // #normalMap
  vec4 normalSpec = vec4(0,0,0,0);  // #noNormalMap
  vec4 reflection = texture(sampler2D(reflectionMap, samplerTex2D), v_texCoord.xy); // #reflection
  vec4 reflection = vec4(0,0,0,0);  // #noReflection
  vec3 tangentNormal = normalSpec.xyz - vec3(0.5, 0.5, 0.5);  // #normalMap
  vec3 normal = (tangentToWorld * tangentNormal);  // #normalMap
  normal = normalize(normal);  // #normalMap
  vec3 normal = normalize(v_normal); // #noNormalMap
  vec3 surfaceToLight = normalize(v_surfaceToLight);
  vec3 surfaceToView = normalize(v_surfaceToView);
  vec4 skyColor = texture(samplerCube(skybox, samplerSkybox), -reflect(surfaceToView, normal));  // #reflection
  vec4 skyColor = vec4(0.5,0.5,1,1);  // #noReflection

  vec3 halfVector = normalize(surfaceToLight + surfaceToView);
  vec4 litR = lit(dot(normal, surfaceToLight),
                    dot(normal, halfVector), lightFactorUniforms.shininess);
  outColor = vec4(mix(
      skyColor,
      lightUniforms.lightColor * (diffuseColor * litR.y + diffuseColor * lightUniforms.ambient +
                    lightUniforms.specular * litR.z * lightFactorUniforms.specularFactor * normalSpec.a),
      1.0 - reflection.r).rgb,
      diffuseColor.a);
  outColor = mix(outColor, vec4(fogs.fogColor.rgb, diffuseColor.a),
		clamp(pow((v_position.z / v_position.w), fogs.fogPower) * fogs.fogMult - fogs.fogOffset,0.0,1.0));
}
