#version 450

layout(location = 0) in vec4 v_position;
layout(location = 1) in vec2 v_texCoord;
layout(location = 2) in vec3 v_normal;
layout(location = 3) in vec3 v_surfaceToLight;
layout(location = 4) in vec3 v_surfaceToView;
layout(location = 0) out vec4 outColor;

layout(std140, set = 0, binding = 0) uniform LightUniforms {
    vec4 lightColor;
    vec4 specular;
    vec4 ambient;
} lightUniforms;

layout(std140, set = 2, binding = 0) uniform LightFactorUniforms {
    float shininess;
    float specularFactor;
} lightFactorUniforms;

layout(set = 2, binding = 1) uniform sampler samplerTex2D;
layout(set = 2, binding = 2) uniform texture2D diffuse;

layout(std140, set = 0, binding = 1) uniform Fogs
{
    float fogPower;
	float fogMult;
	float fogOffset;
	vec4 fogColor;
} fogs;

vec4 lit(float l ,float h, float m) {
  return vec4(1.0,
              max(l, 0.0),
              (l > 0.0) ? pow(max(0.0, h), m) : 0.0,
              1.0);
}
void main() {
  vec4 diffuseColor = texture(sampler2D(diffuse, samplerTex2D), v_texCoord);
  vec3 normal = normalize(v_normal);
  vec3 surfaceToLight = normalize(v_surfaceToLight);
  vec3 surfaceToView = normalize(v_surfaceToView);
  vec3 halfVector = normalize(surfaceToLight + surfaceToView);
  vec4 litR = lit(dot(normal, surfaceToLight),
                    dot(normal, halfVector), lightFactorUniforms.shininess);
  outColor = vec4((
  lightUniforms.lightColor * (diffuseColor * litR.y + diffuseColor * lightUniforms.ambient +
                lightUniforms.specular * litR.z * lightFactorUniforms.specularFactor)).rgb,
      diffuseColor.a);
  outColor = mix(outColor, vec4(fogs.fogColor.rgb, diffuseColor.a),
		clamp(pow((v_position.z / v_position.w), 0) * 0 - 0,0.0,1.0));
}
